@using System.Web
@using Microsoft.AspNetCore.Html
@using Newtonsoft.Json.Linq
@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage<dynamic>

@if (Model != null && Model.GetType() == typeof(JObject) && Model.sections != null)
{
    foreach (var section in Model.sections)
    {
        foreach (var row in section.rows)
        {
            renderRow(row);
        }
    }
}

@functions {

    private async Task renderRow(dynamic row)

    {
        <section class="section-grid">
                <div class="container" @RenderElementAttributes(row)>
                    <div class="row">
                        @foreach (var area in row.areas)

                        {
                            <div class="col-md-@area.grid column">
                                <div @RenderElementAttributes(area)>
                                    @foreach (var control in area.controls)
                                    {
                                        if (control != null && control.editor != null && control.editor.view != null)
                                        {
                                            <text>@await Html.PartialAsync("grid/editors/base", (object)control)</text>
                                        }
                                    }
                                </div>
                            </div>
                        }
                    </div>
                </div>
        </section>
    }
}

@functions {

    public static HtmlString RenderElementAttributes(dynamic contentItem)

    {
        var attrs = new List<string>();

        JObject cfg = contentItem.config;

        if (cfg != null)

        {
            foreach (JProperty property in cfg.Properties())

            {
                var propertyValue = HttpUtility.HtmlAttributeEncode(property.Value.ToString());

                attrs.Add(property.Name + "=\"" + propertyValue + "\"");

            }
        }

        JObject style = contentItem.styles;

        if (style != null)

        {
            var cssVals = new List<string>();

            foreach (JProperty property in style.Properties())
            {
                var propertyValue = property.Value.ToString();

                if (string.IsNullOrWhiteSpace(propertyValue) == false)

                {
                    cssVals.Add(property.Name + ":" + propertyValue + ";");
                }
            }

            if (cssVals.Any())
                attrs.Add("style=\"" + HttpUtility.HtmlAttributeEncode(string.Join(" ", cssVals)) + "\"");
        }

        return new HtmlString(string.Join(" ", attrs));

    }
}
